# File Uploads 
scalar Upload
scalar Time

schema {
    query: Query
}

type Query {
    schools(code: String): [School]!
}

type Mutation {
    # schools
    createSchool(input: NewSchool!): School!

    # courses
    createCourse(input: NewCourse! schoolKey: String!): Course!    
    importCourse(schoolKey: String! courseKey: String! term: String!): Course!

    # classes
    createClass(input: NewClass! schoolKey: String! courseKey: String!): Class!

    # resources
    createResource(input: NewResource! schoolKey: String! courseKey: String! classKey: String!): Resource!
    updateResource(input: UpdateResource! schoolKey: String! courseKey: String! classKey: String! resourceKey: String!): Resource!
    
    # lectures
    createLecture(input: NewLecture! schoolKey: String! courseKey: String! classKey: String!): Lecture!
}

# Creates a new school.
input NewSchool {
    name: String!
    code: String!
    description: String
    homepage: String
}

# Create a new course, within a school.
input NewCourse {
    name: String!
    subject: String!
    code: String!
    description: String!
    homepage: String
}

# Creates a new class, within a course.
input NewClass {
    term: String!
    section: String!
}

# Create a new lecture, within a class.
input NewLecture {
    file: Upload!
    date: Time!
    name: String
    description: String
}

input NewResource {
    file: Upload
    date: Time # if not provided, will automatically fill out.
    name: String
    description: String
}

input UpdateResource {
    file: Upload
    date: Time # if not provided, will automatically fill out.
    name: String
    description: String
    published: Boolean
}

type School {
    name: String!
    code: String!
    description: String
    homepage: String
    courses: [Course]!
    dateCreated: Time!
    dateModified: Time!
}

type Course {
    name: String!
    subject: String!
    code: String!
    description: String
    homepage: String
    classes: [Class]!
}

type Class {
    name: String! 
    subject: String!
    code: String!
    term: String!
    section: String!
    instructors: [Instructor]! 
    lectures: [Lecture]
    resources(dateBefore: Time, dateAfter: Time): [Resource]
    dateCreated: Time!
    dateModified: Time!
}

type Lecture {
    name: String
    description: String
    audio: String!
    duration: Int!
    transcription: Transcription!
    dateCreated: Time!
    dateModified: Time!
}

type Resource {
    name: String
    description: String
    objectKey: String!
    type: String!
    size: Int!
    published: Boolean
    dateCreated: Time!
    dateModified: Time!
}

type Instructor {
    title: String
    firstName: String!
    middleName: String
    lastName: String!
}