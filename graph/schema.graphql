# File Uploads 
scalar Upload
scalar Time

schema {
    query: Query
}

type Query {
    schools(code: String): [School]!
    courses(schoolCode: String! subjectCode: String courseCode: String): [Course]!
    classes(schoolCode: String! subjectCode: String! courseCode: String! term: String section: String): [Class]!
    
    protectedClass(courseCode: String! classCode: String! accessKey: String!): Class!
}

type Mutation {
    # schools
    createSchool(input: NewSchool!): School!
    updateSchool(input: UpdateSchool! schoolCode: String!): School!

    # courses
    createCourse(input: NewCourse! schoolCode: String!): Course!    
    importCourse(schoolCode: String! courseCode: String! term: String!): Course!

    # classes
    createClass(input: NewClass! schoolCode: String! courseCode: String!): Class!

    # resources
    createResource(input: NewResource! schoolCode: String! courseCode: String! classCode: String!): Resource!
    updateResource(input: UpdateResource! schoolCode: String! courseCode: String! classCode: String! resourceKey: String!): Resource!
    
    # lectures
    createLecture(input: NewLecture! schoolCode: String! courseCode: String! classCode: String!): Lecture!
}

# Creates a new school.
input NewSchool {
    name: String!
    code: String!
    description: String
    homepage: String
}

input UpdateSchool {
    name: String
    description: String
    homepage: String
    headerImage: Upload
    logoImage: Upload
}

# Create a new course, within a school.
input NewCourse {
    name: String!
    subject: String!
    code: String!
    description: String!
    homepage: String
}

# Creates a new class, within a course.
input NewClass {
    term: String!
    section: String!
}

# Create a new lecture, within a class.
input NewLecture {
    file: Upload!
    date: Time!
    name: String
    description: String
}

input NewResource {
    file: Upload
    date: Time # if not provided, will automatically fill out.
    name: String
    description: String
}

input UpdateResource {
    file: Upload
    date: Time # if not provided, will automatically fill out.
    name: String
    description: String
    published: Boolean
}

type School {
    name: String!
    code: String!
    description: String
    homepage: String
    courses(subject: String, code: String): [Course]!
    dateCreated: Time!
    dateModified: Time!
}

type Course {
    name: String!
    subject: String!
    code: String!
    description: String
    homepage: String
    classes(term: String): [Class]!
}

type Class {
    name: String! 
    subject: String!
    code: String!
    term: String!
    section: String!
    instructors: [Instructor]! 
    lectures: [Lecture]
    resources(dateBefore: Time, dateAfter: Time): [Resource]
    dateCreated: Time!
    dateModified: Time!
}

type Lecture {
    name: String
    description: String
    audio: String!
    duration: Int!
    transcription: Transcription!
    dateCreated: Time!
    dateModified: Time!
}

type Resource {
    name: String
    description: String
    # unique identifer for resource.
    objectKey: String! 
    # URL to access resource
    url: String!
    # type which is not associated with the underlying file format.
    type: String!
    # MIME value
    contentType: String!
    # filename of the uploaded resource.
    filename: String!
    # size of the file in bytes.
    size: Int!
    # allow public access to the resource.
    published: Boolean
    # time and date when resource was created.
    dateCreated: Time!
    # time and date when resource was updated.
    dateModified: Time!
}

type Instructor {
    title: String
    firstName: String!
    middleName: String
    lastName: String!
}